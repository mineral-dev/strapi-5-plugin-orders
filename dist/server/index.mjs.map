{"version":3,"file":"index.mjs","sources":["../../server/src/bootstrap.js","../../server/src/destroy.js","../../server/src/register.js","../../server/src/config/index.js","../../server/src/content-types/index.js","../../server/src/controllers/controller.js","../../server/src/controllers/index.js","../../server/src/middlewares/index.js","../../server/src/policies/index.js","../../server/src/routes/content-api.js","../../server/src/routes/index.js","../../server/src/services/service.js","../../server/src/services/index.js","../../server/src/index.js"],"sourcesContent":["const bootstrap = async ({ strapi }) => {\n  const actions = [\n    {\n      section: 'plugins',\n      displayName: 'Show Order',\n      uid: 'access',  // Action to access the plugin\n      pluginName: 'strapi-5-plugin-orders',  // Plugin name\n    },\n  ];\n\n  await strapi.admin.services.permission.actionProvider.registerMany(actions);\n};\n\nexport default bootstrap;\n","const destroy = ({ strapi }) => {\n  // destroy phase\n};\n\nexport default destroy;\n","const register = ({ strapi }) => {\n  // register phase\n};\n\nexport default register;\n","export default {\n  default: {},\n  validator() {},\n};\n","export default {};\n","const controller = ({ strapi }) => ({\n  index(ctx) {\n    ctx.body = strapi\n      .plugin('strapi-5-plugin-orders')\n      // the name of the service file & the method.\n      .service('service')\n      .getWelcomeMessage();\n  },\n  async getOrder(ctx) {\n    const { page, status, q } = ctx.request.query\n\n    try {\n      ctx.body = await strapi\n        .plugin('strapi-5-plugin-orders')\n        // the name of the service file & the method.\n        .service('service')\n        .getOrders({ page, status, q });\n    } catch (error) {\n      ctx.send({ message: error.message }, 409);\n    }\n  },\n  async getOrderById(ctx) {\n    const { id } = ctx.params;\n\n    try {\n      ctx.body = await strapi\n        .plugin('strapi-5-plugin-orders')\n        // the name of the service file & the method.\n        .service('service')\n        .getOrderById(id);\n    } catch (error) {\n      ctx.send({ message: error.message }, 409);\n    }\n  }\n});\n\nexport default controller;\n","import controller from './controller';\n\nexport default {\n  controller,\n};\n","export default {};\n","export default {};\n","export default [\n  {\n    method: 'GET',\n    path: '/',\n    // name of the controller file & the method.\n    handler: 'controller.index',\n    config: {\n      policies: [],\n    },\n  },\n  {\n    method: 'GET',\n    path: '/orders',\n    // name of the controller file & the method.\n    handler: 'controller.getOrder',\n    config: {\n      auth: false,\n      policies: [],\n    },\n  },\n  {\n    method: 'GET',\n    path: '/orders/:id',\n    // name of the controller file & the method.\n    handler: 'controller.getOrderById',\n    config: {\n      auth: false,\n      policies: [],\n    },\n  }\n];\n","import contentAPIRoutes from './content-api';\n\nconst routes = {\n  'content-api': {\n    type: 'content-api',\n    routes: contentAPIRoutes,\n  },\n};\n\nexport default routes;\n","const service = ({ strapi }) => ({\n  getWelcomeMessage() {\n    return 'Welcome to Strapi ðŸš€';\n  },\n  async getOrders({ page = 0, q, status }) {\n    let orders = {\n      data: [],\n      pagination: {\n        page: 1,\n        pageSize: 10,\n        pageCount: 0,\n        total: 0\n      }\n    }\n\n    try {\n      const [entries, count] = await strapi.db.query('api::order.order').findWithCount({\n        where: {\n          $or: [\n            {\n              order_id: { $containsi: q ?? \"\" }\n            },\n            {\n              email: { $containsi: q ?? \"\"}\n            }\n          ],\n          $and: [\n            {\n              order_status: { $containsi: status ?? \"\" }\n            }\n          ]\n        },\n        populate: { order_item: true },\n        orderBy: { id: 'DESC' },\n        limit: 10,\n        offset: page,\n      })\n      const currentPage = Math.floor(page / 10) + 1;\n      const pagination = {\n        page: currentPage,\n        pageSize: 10,\n        pageCount: Math.ceil(count / 10),\n        total: count\n      };\n\n      orders = {\n        data: entries,\n        pagination\n      }\n    } catch (error) {\n      console.log(error.message, 'get err orders')\n    }\n\n    return orders;\n  },\n  async getOrderById(id) {\n    let order = null;\n\n    try {\n      order = await strapi.db.query('api::order.order').findOne({\n        where: { documentId: id },\n        populate: { order_item: true }\n      });\n    } catch (error) {\n      console.log(error.message, 'get err order by id')\n    }\n\n    return order;\n  }\n});\n\nexport default service;\n","import service from './service';\n\nexport default {\n  service,\n};\n","/**\n * Application methods\n */\nimport bootstrap from './bootstrap';\nimport destroy from './destroy';\nimport register from './register';\n\n/**\n * Plugin server methods\n */\nimport config from './config';\nimport contentTypes from './content-types';\nimport controllers from './controllers';\nimport middlewares from './middlewares';\nimport policies from './policies';\nimport routes from './routes';\nimport services from './services';\n\nexport default {\n  bootstrap,\n  destroy,\n  register,\n\n  config,\n  controllers,\n  contentTypes,\n  middlewares,\n  policies,\n  routes,\n  services,\n};\n"],"names":[],"mappings":"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"}